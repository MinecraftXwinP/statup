// Code generated by MockGen. DO NOT EDIT.
// Source: upper.io/db.v3/lib/sqlbuilder (interfaces: Database)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
	db_v3 "upper.io/db.v3"
	sqlbuilder "upper.io/db.v3/lib/sqlbuilder"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// ClearCache mocks base method
func (m *MockDatabase) ClearCache() {
	m.ctrl.Call(m, "ClearCache")
}

// ClearCache indicates an expected call of ClearCache
func (mr *MockDatabaseMockRecorder) ClearCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockDatabase)(nil).ClearCache))
}

// Close mocks base method
func (m *MockDatabase) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// Collection mocks base method
func (m *MockDatabase) Collection(arg0 string) db_v3.Collection {
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].(db_v3.Collection)
	return ret0
}

// Collection indicates an expected call of Collection
func (mr *MockDatabaseMockRecorder) Collection(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabase)(nil).Collection), arg0)
}

// Collections mocks base method
func (m *MockDatabase) Collections() ([]string, error) {
	ret := m.ctrl.Call(m, "Collections")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collections indicates an expected call of Collections
func (mr *MockDatabaseMockRecorder) Collections() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collections", reflect.TypeOf((*MockDatabase)(nil).Collections))
}

// ConnMaxLifetime mocks base method
func (m *MockDatabase) ConnMaxLifetime() time.Duration {
	ret := m.ctrl.Call(m, "ConnMaxLifetime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ConnMaxLifetime indicates an expected call of ConnMaxLifetime
func (mr *MockDatabaseMockRecorder) ConnMaxLifetime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnMaxLifetime", reflect.TypeOf((*MockDatabase)(nil).ConnMaxLifetime))
}

// ConnectionURL mocks base method
func (m *MockDatabase) ConnectionURL() db_v3.ConnectionURL {
	ret := m.ctrl.Call(m, "ConnectionURL")
	ret0, _ := ret[0].(db_v3.ConnectionURL)
	return ret0
}

// ConnectionURL indicates an expected call of ConnectionURL
func (mr *MockDatabaseMockRecorder) ConnectionURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionURL", reflect.TypeOf((*MockDatabase)(nil).ConnectionURL))
}

// Context mocks base method
func (m *MockDatabase) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDatabaseMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDatabase)(nil).Context))
}

// DeleteFrom mocks base method
func (m *MockDatabase) DeleteFrom(arg0 string) sqlbuilder.Deleter {
	ret := m.ctrl.Call(m, "DeleteFrom", arg0)
	ret0, _ := ret[0].(sqlbuilder.Deleter)
	return ret0
}

// DeleteFrom indicates an expected call of DeleteFrom
func (mr *MockDatabaseMockRecorder) DeleteFrom(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFrom", reflect.TypeOf((*MockDatabase)(nil).DeleteFrom), arg0)
}

// Driver mocks base method
func (m *MockDatabase) Driver() interface{} {
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Driver indicates an expected call of Driver
func (mr *MockDatabaseMockRecorder) Driver() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockDatabase)(nil).Driver))
}

// Exec mocks base method
func (m *MockDatabase) Exec(arg0 interface{}, arg1 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDatabaseMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabase)(nil).Exec), varargs...)
}

// ExecContext mocks base method
func (m *MockDatabase) ExecContext(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockDatabaseMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDatabase)(nil).ExecContext), varargs...)
}

// InsertInto mocks base method
func (m *MockDatabase) InsertInto(arg0 string) sqlbuilder.Inserter {
	ret := m.ctrl.Call(m, "InsertInto", arg0)
	ret0, _ := ret[0].(sqlbuilder.Inserter)
	return ret0
}

// InsertInto indicates an expected call of InsertInto
func (mr *MockDatabaseMockRecorder) InsertInto(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInto", reflect.TypeOf((*MockDatabase)(nil).InsertInto), arg0)
}

// Iterator mocks base method
func (m *MockDatabase) Iterator(arg0 interface{}, arg1 ...interface{}) sqlbuilder.Iterator {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Iterator", varargs...)
	ret0, _ := ret[0].(sqlbuilder.Iterator)
	return ret0
}

// Iterator indicates an expected call of Iterator
func (mr *MockDatabaseMockRecorder) Iterator(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockDatabase)(nil).Iterator), varargs...)
}

// IteratorContext mocks base method
func (m *MockDatabase) IteratorContext(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) sqlbuilder.Iterator {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IteratorContext", varargs...)
	ret0, _ := ret[0].(sqlbuilder.Iterator)
	return ret0
}

// IteratorContext indicates an expected call of IteratorContext
func (mr *MockDatabaseMockRecorder) IteratorContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratorContext", reflect.TypeOf((*MockDatabase)(nil).IteratorContext), varargs...)
}

// Logger mocks base method
func (m *MockDatabase) Logger() db_v3.Logger {
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(db_v3.Logger)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockDatabaseMockRecorder) Logger() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockDatabase)(nil).Logger))
}

// LoggingEnabled mocks base method
func (m *MockDatabase) LoggingEnabled() bool {
	ret := m.ctrl.Call(m, "LoggingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LoggingEnabled indicates an expected call of LoggingEnabled
func (mr *MockDatabaseMockRecorder) LoggingEnabled() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggingEnabled", reflect.TypeOf((*MockDatabase)(nil).LoggingEnabled))
}

// MaxIdleConns mocks base method
func (m *MockDatabase) MaxIdleConns() int {
	ret := m.ctrl.Call(m, "MaxIdleConns")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxIdleConns indicates an expected call of MaxIdleConns
func (mr *MockDatabaseMockRecorder) MaxIdleConns() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxIdleConns", reflect.TypeOf((*MockDatabase)(nil).MaxIdleConns))
}

// MaxOpenConns mocks base method
func (m *MockDatabase) MaxOpenConns() int {
	ret := m.ctrl.Call(m, "MaxOpenConns")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxOpenConns indicates an expected call of MaxOpenConns
func (mr *MockDatabaseMockRecorder) MaxOpenConns() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxOpenConns", reflect.TypeOf((*MockDatabase)(nil).MaxOpenConns))
}

// Name mocks base method
func (m *MockDatabase) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDatabaseMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDatabase)(nil).Name))
}

// NewTx mocks base method
func (m *MockDatabase) NewTx(arg0 context.Context) (sqlbuilder.Tx, error) {
	ret := m.ctrl.Call(m, "NewTx", arg0)
	ret0, _ := ret[0].(sqlbuilder.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTx indicates an expected call of NewTx
func (mr *MockDatabaseMockRecorder) NewTx(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTx", reflect.TypeOf((*MockDatabase)(nil).NewTx), arg0)
}

// Open mocks base method
func (m *MockDatabase) Open(arg0 db_v3.ConnectionURL) error {
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockDatabaseMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDatabase)(nil).Open), arg0)
}

// Ping mocks base method
func (m *MockDatabase) Ping() error {
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockDatabaseMockRecorder) Ping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabase)(nil).Ping))
}

// Prepare mocks base method
func (m *MockDatabase) Prepare(arg0 interface{}) (*sql.Stmt, error) {
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockDatabaseMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDatabase)(nil).Prepare), arg0)
}

// PrepareContext mocks base method
func (m *MockDatabase) PrepareContext(arg0 context.Context, arg1 interface{}) (*sql.Stmt, error) {
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext
func (mr *MockDatabaseMockRecorder) PrepareContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockDatabase)(nil).PrepareContext), arg0, arg1)
}

// PreparedStatementCacheEnabled mocks base method
func (m *MockDatabase) PreparedStatementCacheEnabled() bool {
	ret := m.ctrl.Call(m, "PreparedStatementCacheEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PreparedStatementCacheEnabled indicates an expected call of PreparedStatementCacheEnabled
func (mr *MockDatabaseMockRecorder) PreparedStatementCacheEnabled() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparedStatementCacheEnabled", reflect.TypeOf((*MockDatabase)(nil).PreparedStatementCacheEnabled))
}

// Query mocks base method
func (m *MockDatabase) Query(arg0 interface{}, arg1 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDatabaseMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabase)(nil).Query), varargs...)
}

// QueryContext mocks base method
func (m *MockDatabase) QueryContext(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockDatabaseMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDatabase)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method
func (m *MockDatabase) QueryRow(arg0 interface{}, arg1 ...interface{}) (*sql.Row, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockDatabaseMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDatabase)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method
func (m *MockDatabase) QueryRowContext(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) (*sql.Row, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRowContext indicates an expected call of QueryRowContext
func (mr *MockDatabaseMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDatabase)(nil).QueryRowContext), varargs...)
}

// Select mocks base method
func (m *MockDatabase) Select(arg0 ...interface{}) sqlbuilder.Selector {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(sqlbuilder.Selector)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockDatabaseMockRecorder) Select(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabase)(nil).Select), arg0...)
}

// SelectFrom mocks base method
func (m *MockDatabase) SelectFrom(arg0 ...interface{}) sqlbuilder.Selector {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectFrom", varargs...)
	ret0, _ := ret[0].(sqlbuilder.Selector)
	return ret0
}

// SelectFrom indicates an expected call of SelectFrom
func (mr *MockDatabaseMockRecorder) SelectFrom(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFrom", reflect.TypeOf((*MockDatabase)(nil).SelectFrom), arg0...)
}

// SetConnMaxLifetime mocks base method
func (m *MockDatabase) SetConnMaxLifetime(arg0 time.Duration) {
	m.ctrl.Call(m, "SetConnMaxLifetime", arg0)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime
func (mr *MockDatabaseMockRecorder) SetConnMaxLifetime(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockDatabase)(nil).SetConnMaxLifetime), arg0)
}

// SetLogger mocks base method
func (m *MockDatabase) SetLogger(arg0 db_v3.Logger) {
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockDatabaseMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockDatabase)(nil).SetLogger), arg0)
}

// SetLogging mocks base method
func (m *MockDatabase) SetLogging(arg0 bool) {
	m.ctrl.Call(m, "SetLogging", arg0)
}

// SetLogging indicates an expected call of SetLogging
func (mr *MockDatabaseMockRecorder) SetLogging(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogging", reflect.TypeOf((*MockDatabase)(nil).SetLogging), arg0)
}

// SetMaxIdleConns mocks base method
func (m *MockDatabase) SetMaxIdleConns(arg0 int) {
	m.ctrl.Call(m, "SetMaxIdleConns", arg0)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns
func (mr *MockDatabaseMockRecorder) SetMaxIdleConns(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockDatabase)(nil).SetMaxIdleConns), arg0)
}

// SetMaxOpenConns mocks base method
func (m *MockDatabase) SetMaxOpenConns(arg0 int) {
	m.ctrl.Call(m, "SetMaxOpenConns", arg0)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns
func (mr *MockDatabaseMockRecorder) SetMaxOpenConns(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockDatabase)(nil).SetMaxOpenConns), arg0)
}

// SetPreparedStatementCache mocks base method
func (m *MockDatabase) SetPreparedStatementCache(arg0 bool) {
	m.ctrl.Call(m, "SetPreparedStatementCache", arg0)
}

// SetPreparedStatementCache indicates an expected call of SetPreparedStatementCache
func (mr *MockDatabaseMockRecorder) SetPreparedStatementCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreparedStatementCache", reflect.TypeOf((*MockDatabase)(nil).SetPreparedStatementCache), arg0)
}

// SetTxOptions mocks base method
func (m *MockDatabase) SetTxOptions(arg0 sql.TxOptions) {
	m.ctrl.Call(m, "SetTxOptions", arg0)
}

// SetTxOptions indicates an expected call of SetTxOptions
func (mr *MockDatabaseMockRecorder) SetTxOptions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxOptions", reflect.TypeOf((*MockDatabase)(nil).SetTxOptions), arg0)
}

// Tx mocks base method
func (m *MockDatabase) Tx(arg0 context.Context, arg1 func(sqlbuilder.Tx) error) error {
	ret := m.ctrl.Call(m, "Tx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx
func (mr *MockDatabaseMockRecorder) Tx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockDatabase)(nil).Tx), arg0, arg1)
}

// TxOptions mocks base method
func (m *MockDatabase) TxOptions() *sql.TxOptions {
	ret := m.ctrl.Call(m, "TxOptions")
	ret0, _ := ret[0].(*sql.TxOptions)
	return ret0
}

// TxOptions indicates an expected call of TxOptions
func (mr *MockDatabaseMockRecorder) TxOptions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxOptions", reflect.TypeOf((*MockDatabase)(nil).TxOptions))
}

// Update mocks base method
func (m *MockDatabase) Update(arg0 string) sqlbuilder.Updater {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(sqlbuilder.Updater)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDatabaseMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabase)(nil).Update), arg0)
}

// WithContext mocks base method
func (m *MockDatabase) WithContext(arg0 context.Context) sqlbuilder.Database {
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(sqlbuilder.Database)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (mr *MockDatabaseMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockDatabase)(nil).WithContext), arg0)
}
